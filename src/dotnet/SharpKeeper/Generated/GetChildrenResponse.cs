// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

using System;
using Org.Apache.Jute;

namespace Org.Apache.Zookeeper.Proto
{
public class GetChildrenResponse : IRecord, IComparable 
{
  public GetChildrenResponse() {
  }
  public GetChildrenResponse(
  System.Collections.Generic.List<string> children
) {
Children=children;
  }
  public System.Collections.Generic.List<string> Children { get; set; } 
  public void Serialize(IOutputArchive a_, String tag) {
    a_.StartRecord(this,tag);
    {
      a_.StartVector(Children,"children");
      if (Children!= null) {          int len1 = Children.Count;
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            string e1 = (string) Children[vidx1];
        a_.WriteString(e1,e1);
          }
      }
      a_.EndVector(Children,"children");
    }
    a_.EndRecord(this,tag);
  }
  public void Deserialize(IInputArchive a_, String tag) {
    a_.StartRecord(tag);
    {
      IIndex vidx1 = a_.StartVector("children");
      if (vidx1!= null) {          Children=new System.Collections.Generic.List<string>();
          for (; !vidx1.Done(); vidx1.Incr()) {
    String e1;
    e1=a_.ReadString("e1");
            Children.Add(e1);
          }
      }
    a_.EndVector("children");
    }
    a_.EndRecord(tag);
}
  public override String ToString() {
    try {
      System.IO.MemoryStream ms = new System.IO.MemoryStream();
      System.IO.BinaryWriter writer =
        new System.IO.BinaryWriter(ms);
      BinaryOutputArchive a_ = 
        new BinaryOutputArchive(writer);
      a_.StartRecord(this,"");
    {
      a_.StartVector(Children,"children");
      if (Children!= null) {          int len1 = Children.Count;
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            string e1 = (string) Children[vidx1];
        a_.WriteString(e1,e1);
          }
      }
      a_.EndVector(Children,"children");
    }
      a_.EndRecord(this,"");
      ms.Position = 0;
      return System.Text.Encoding.UTF8.GetString(ms.ToArray());
    } catch (Exception ex) {
      Console.WriteLine(ex.StackTrace);
    }
    return "ERROR";
  }
  public void Write(System.IO.BinaryWriter writer) {
    BinaryOutputArchive archive = new BinaryOutputArchive(writer);
    Serialize(archive, "");
  }
  public void ReadFields(System.IO.BinaryReader reader) {
    BinaryInputArchive archive = new BinaryInputArchive(reader);
    Deserialize(archive, "");
  }
  public int CompareTo (object peer_) {
    throw new InvalidOperationException("comparing GetChildrenResponse is unimplemented");
  }
  public override bool Equals(object peer_) {
    if (!(peer_ is GetChildrenResponse)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    bool ret = false;
    GetChildrenResponse peer = (GetChildrenResponse)peer_;
    ret = Children.Equals(peer.Children);
    if (!ret) return ret;
     return ret;
  }
  public override int GetHashCode() {
    int result = 17;
    int ret;
    ret = Children.GetHashCode();
    result = 37*result + ret;
    return result;
  }
  public static string Signature() {
    return "LGetChildrenResponse([s])";
  }
}
}
