// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

using System;
using Org.Apache.Jute;

namespace Org.Apache.Zookeeper.Proto
{
public class SetACLRequest : IRecord, IComparable 
{
  public SetACLRequest() {
  }
  public SetACLRequest(
  string path
,
  System.Collections.Generic.List<Org.Apache.Zookeeper.Data.ACL> acl
,
  int version
) {
Path=path;
Acl=acl;
Version=version;
  }
  public string Path { get; set; } 
  public System.Collections.Generic.List<Org.Apache.Zookeeper.Data.ACL> Acl { get; set; } 
  public int Version { get; set; } 
  public void Serialize(IOutputArchive a_, String tag) {
    a_.StartRecord(this,tag);
    a_.WriteString(Path,"path");
    {
      a_.StartVector(Acl,"acl");
      if (Acl!= null) {          int len1 = Acl.Count;
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            IRecord e1 = (IRecord) Acl[vidx1];
    a_.WriteRecord(e1,"e1");
          }
      }
      a_.EndVector(Acl,"acl");
    }
    a_.WriteInt(Version,"version");
    a_.EndRecord(this,tag);
  }
  public void Deserialize(IInputArchive a_, String tag) {
    a_.StartRecord(tag);
    Path=a_.ReadString("path");
    {
      IIndex vidx1 = a_.StartVector("acl");
      if (vidx1!= null) {          Acl=new System.Collections.Generic.List<Org.Apache.Zookeeper.Data.ACL>();
          for (; !vidx1.Done(); vidx1.Incr()) {
    Org.Apache.Zookeeper.Data.ACL e1;
    e1= new Org.Apache.Zookeeper.Data.ACL();
    a_.ReadRecord(e1,"e1");
            Acl.Add(e1);
          }
      }
    a_.EndVector("acl");
    }
    Version=a_.ReadInt("version");
    a_.EndRecord(tag);
}
  public override String ToString() {
    try {
      System.IO.MemoryStream ms = new System.IO.MemoryStream();
      System.IO.BinaryWriter writer =
        new System.IO.BinaryWriter(ms);
      BinaryOutputArchive a_ = 
        new BinaryOutputArchive(writer);
      a_.StartRecord(this,"");
    a_.WriteString(Path,"path");
    {
      a_.StartVector(Acl,"acl");
      if (Acl!= null) {          int len1 = Acl.Count;
          for(int vidx1 = 0; vidx1<len1; vidx1++) {
            IRecord e1 = (IRecord) Acl[vidx1];
    a_.WriteRecord(e1,"e1");
          }
      }
      a_.EndVector(Acl,"acl");
    }
    a_.WriteInt(Version,"version");
      a_.EndRecord(this,"");
      ms.Position = 0;
      return System.Text.Encoding.UTF8.GetString(ms.ToArray());
    } catch (Exception ex) {
      Console.WriteLine(ex.StackTrace);
    }
    return "ERROR";
  }
  public void Write(System.IO.BinaryWriter writer) {
    BinaryOutputArchive archive = new BinaryOutputArchive(writer);
    Serialize(archive, "");
  }
  public void ReadFields(System.IO.BinaryReader reader) {
    BinaryInputArchive archive = new BinaryInputArchive(reader);
    Deserialize(archive, "");
  }
  public int CompareTo (object peer_) {
    throw new InvalidOperationException("comparing SetACLRequest is unimplemented");
  }
  public override bool Equals(object peer_) {
    if (!(peer_ is SetACLRequest)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    bool ret = false;
    SetACLRequest peer = (SetACLRequest)peer_;
    ret = Path.Equals(peer.Path);
    if (!ret) return ret;
    ret = Acl.Equals(peer.Acl);
    if (!ret) return ret;
    ret = (Version==peer.Version);
    if (!ret) return ret;
     return ret;
  }
  public override int GetHashCode() {
    int result = 17;
    int ret;
    ret = Path.GetHashCode();
    result = 37*result + ret;
    ret = Acl.GetHashCode();
    result = 37*result + ret;
    ret = (int)Version;
    result = 37*result + ret;
    return result;
  }
  public static string Signature() {
    return "LSetACLRequest(s[LACL(iLId(ss))]i)";
  }
}
}
