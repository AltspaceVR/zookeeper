// File generated by hadoop record compiler. Do not edit.
/**
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

using System;
using Org.Apache.Jute;

namespace Org.Apache.Zookeeper.Proto
{
public class ReplyHeader : IRecord, IComparable 
{
  public ReplyHeader() {
  }
  public ReplyHeader(
  int xid
,
  long zxid
,
  int err
) {
Xid=xid;
Zxid=zxid;
Err=err;
  }
  public int Xid { get; set; } 
  public long Zxid { get; set; } 
  public int Err { get; set; } 
  public void Serialize(IOutputArchive a_, String tag) {
    a_.StartRecord(this,tag);
    a_.WriteInt(Xid,"xid");
    a_.WriteLong(Zxid,"zxid");
    a_.WriteInt(Err,"err");
    a_.EndRecord(this,tag);
  }
  public void Deserialize(IInputArchive a_, String tag) {
    a_.StartRecord(tag);
    Xid=a_.ReadInt("xid");
    Zxid=a_.ReadLong("zxid");
    Err=a_.ReadInt("err");
    a_.EndRecord(tag);
}
  public override String ToString() {
    try {
      System.IO.MemoryStream ms = new System.IO.MemoryStream();
      System.IO.BinaryWriter writer =
        new System.IO.BinaryWriter(ms);
      BinaryOutputArchive a_ = 
        new BinaryOutputArchive(writer);
      a_.StartRecord(this,"");
    a_.WriteInt(Xid,"xid");
    a_.WriteLong(Zxid,"zxid");
    a_.WriteInt(Err,"err");
      a_.EndRecord(this,"");
      ms.Position = 0;
      return System.Text.Encoding.UTF8.GetString(ms.ToArray());
    } catch (Exception ex) {
      Console.WriteLine(ex.StackTrace);
    }
    return "ERROR";
  }
  public void Write(System.IO.BinaryWriter writer) {
    BinaryOutputArchive archive = new BinaryOutputArchive(writer);
    Serialize(archive, "");
  }
  public void ReadFields(System.IO.BinaryReader reader) {
    BinaryInputArchive archive = new BinaryInputArchive(reader);
    Deserialize(archive, "");
  }
  public int CompareTo (object peer_) {
    if (!(peer_ is ReplyHeader)) {
      throw new InvalidOperationException("Comparing different types of records.");
    }
    ReplyHeader peer = (ReplyHeader) peer_;
    int ret = 0;
    ret = (Xid == peer.Xid)? 0 :((Xid<peer.Xid)?-1:1);
    if (ret != 0) return ret;
    ret = (Zxid == peer.Zxid)? 0 :((Zxid<peer.Zxid)?-1:1);
    if (ret != 0) return ret;
    ret = (Err == peer.Err)? 0 :((Err<peer.Err)?-1:1);
    if (ret != 0) return ret;
     return ret;
  }
  public override bool Equals(object peer_) {
    if (!(peer_ is ReplyHeader)) {
      return false;
    }
    if (peer_ == this) {
      return true;
    }
    bool ret = false;
    ReplyHeader peer = (ReplyHeader)peer_;
    ret = (Xid==peer.Xid);
    if (!ret) return ret;
    ret = (Zxid==peer.Zxid);
    if (!ret) return ret;
    ret = (Err==peer.Err);
    if (!ret) return ret;
     return ret;
  }
  public override int GetHashCode() {
    int result = 17;
    int ret;
    ret = (int)Xid;
    result = 37*result + ret;
    ret = (int)Zxid;
    result = 37*result + ret;
    ret = (int)Err;
    result = 37*result + ret;
    return result;
  }
  public static string Signature() {
    return "LReplyHeader(ili)";
  }
}
}
